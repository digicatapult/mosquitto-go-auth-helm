name: Release

on:
  push:
    branches: ["main"]

jobs:
  preconditions:
    runs-on: ubuntu-latest
    outputs:
      repo_name: ${{ steps.repo_ids.outputs.REPO_NAME }}
      org_name: ${{ steps.repo_ids.outputs.ORG_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Check token
        run: |
          if [ -z "${{ secrets.GITHUB_TOKEN }}"]; then
            echo "Must provide a GITHUB_TOKEN secret in order to run release workflow"
            exit 1
          fi
      - name: Get repository identifiers
        id: repo_ids
        run: |
          REPO_NAME=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')
          ORG_NAME=$(echo "${{ github.event.repository.owner.name }}" | tr '[:upper:]' '[:lower:]')
          echo "::set-output name=REPO_NAME::$REPO_NAME"
          echo "::set-output name=ORG_NAME::$ORG_NAME"

  helm-lint:
    runs-on: ubuntu-latest
    needs: [preconditions]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.4.0
      - uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.0.1
      - name: Run chart-testing (lint)
        run: ct lint --validate-maintainers false --charts charts/mosquitto-go-auth/ --chart-repos bitnami=https://charts.bitnami.com/bitnami,k8s-at-home=https://k8s-at-home.com/charts

  helm-test:
    runs-on: ubuntu-latest
    needs: [preconditions]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all
      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          buildkitd-flags: "--debug"
      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.4.0
      - uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.0.1
      - name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.3.0
        with:
          minikube version: "v1.17.1"
          kubernetes version: "v1.19.2"
      - name: Run chart-testing (install)
        run: ct install  --charts charts/mosquitto-go-auth/ --chart-repos bitnami=https://charts.bitnami.com/bitnami,k8s-at-home=https://k8s-at-home.com/charts

  check-version:
    name: "Check version"
    runs-on: ubuntu-latest
    outputs:
      is_new_version: ${{ steps.get_version.outputs.IS_NEW_VERSION }}
      version: ${{ steps.get_version.outputs.VERSION }}
      build_date: ${{ steps.get_version.outputs.BUILD_DATE }}
      is_prerelease: ${{ steps.get_version.outputs.IS_PRERELEASE }}

    steps:
      - uses: actions/checkout@v2
      - run: git fetch --depth=1 --tags origin
      - name: Install yq
        run: sudo snap install yq
      - name: Check Build Version
        id: get_version
        run: ./scripts/check-version.sh
        shell: bash
      - name: Skipping release as version has not increased
        if: steps.get_version.outputs.IS_NEW_VERSION != 'true'
        shell: bash
        run: |
          echo "Skipping release as current version has already been published"

  publish:
    name: "Publish package"
    needs: [preconditions, helm-lint, helm-test, check-version]
    runs-on: ubuntu-latest
    if: ${{ needs.check-version.outputs.is_new_version == 'true' }}

    steps:
      - uses: actions/checkout@v2

      # Publish helm charts
      - name: Publish Helm charts
        uses: stefanprodan/helm-gh-pages@master
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          charts_dir: charts

      # Build github release
      - name: Build release version
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: ${{ needs.check-version.outputs.version }}
          prerelease: false
          title: Release ${{ needs.check-version.outputs.version }}
      - name: Build release latest
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: latest
          prerelease: false
          title: Latest Release ${{ needs.check-version.outputs.version }}
