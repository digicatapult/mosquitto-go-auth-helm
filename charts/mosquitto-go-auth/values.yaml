replicaCount: 1
strategyType: Recreate

image:
  repository: iegomez/mosquitto-go-auth
  tag: 1.6.0
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

service:
  type: ClusterIP
  annotations:
    {}
    # metallb.universe.tf/allow-shared-ip: pi-hole

ports:
  mqtt:
    enabled: true
    port: 1883
  websocket:
    enabled: true
    port: 9090
  mqtts:
    enabled: false
    port: 8883
    certPath: "/etc/mosquitto/server.crt"
    cert: ""
    keyPath: "/etc/mosquitto/server.key"
    key: ""

persistence:
  enabled: true
  accessMode: ReadWriteOnce
  existingClaim: ""
  mountPath: /mosquitto/data
  subPath: ""
  ## database data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  size: 1Gi

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

podSecurityContext:
  {}
  # runAsUser: 1001
  # fsGroup: 10000

securityContext:
  {}
  # runAsUser: 1001
  # fsGroup: 10000

nodeSelector: {}

tolerations: []

affinity: {}

auth:
  hasher: pbkdf2
  checkPrefixes: false
  files:
    enabled: true
    passwordEntries: ""
    # To use authentication with mosquitto, you can set a list of password entries to be used.
    # reference https://mosquitto.org/man/mosquitto_passwd-1.html to generate these entries.
    # For example:
    # passwordEntries: |-
    #   user1:$6$BKzw0RKerxV4Esbj$Uz5slWGB1TiOtYIEokEl0eR1YSEQAdKpcdRYMsLYbwjktlVzdLyGk41YCPGyMLnBePtdwPhkcm8kjGI0R9s57w==
    #   user2:$6$b5vYuHrSLj48Ii32$NjlbnatIaUQSsNvxxTpawpav6NPyZ8QhGrdEVGtyU1rgEGjNzVGKlstRg29FV6MFTPs/ugPA8D5I5+qRcIMXSg==
    passwordPath: "/etc/mosquitto/passwordfile"
    acls: ""
    # To use authorizations with mosquitto, you can set a list of per user or pattern-based rules.
    # reference https://mosquitto.org/man/mosquitto-conf-5.html for further information.
    # For example:
    # acls: |-
    #   zigbee2mqtt ACLs
    #   user zigbee2mqtt
    #   topic readwrite zigbee2mqtt/#
    #   topic readwrite homeassistant/#
    #   Tasmota-compatible ACLs
    #   pattern read cmnd/%u/#
    #   pattern write stat/%u/#
    #   pattern write tele/%u/#
    aclPath: "/etc/mosquitto/aclfile"
  jwt:
    enabled: false
    mode: ""

    # general options
    # parseToken
    # secret
    # userfield
    # skipUserExpiration
    # skipAclExpiration

    # remote mode options
    # jwtHost: localhost
    # jwtPort: 80
    # jwtGetuserUri: /user
    # jwtAclcheckUri: /acl
    # jwtSuperuserUri
    # jwtWithTls
    # jwtVerifyPeer
    # jwtResponseMode
    # jwtParamsMode

    # local mode options
    # jwtDb: postgres/mysql
    # jwtUserquery
    # jwtPgHost
    # jwtPgPort
    # jwtPgUser
    # jwtPgPassword
    # jwtPgDbname
    # jwtPgSslmode
    # jwtPgSslcert
    # jwtPgSslkey
    # jwtPgSslrootcert
    # jwtPgConnectTries
    # jwtMysqlHost
    # jwtMysqlPort
    # jwtMysqlUser
    # jwtMysqlPassword
    # jwtMysqlDbname
    # jwtMysqlSslmode
    # jwtMysqlSslcert
    # jwtMysqlSslkey
    # jwtMysqlSslrootcert
    # jwtMysqlProtocol
    # jwtMysqlSocket
    # jwtMysqlConnectTries

    # js mode options
    # jwtJsUserScript
    # jwtJsUserScriptPath: '/etc/mosquitto/jwtJsUserScript'
    # jwtJsSuperuserScript
    # jwtJsSuperuserScriptPath: '/etc/mosquitto/jwtJsSuperuserScript'
    # jwtJsAclScript
    # jwtJsAclScriptPath: '/etc/mosquitto/jwtJsAclScript'
    # jwtJsStackDepthLimit
    # jwtJsMsMaxDuration

    # files mode options
    # jwtFilesAcl
    # jwtFilesAclPath: '/etc/mosquitto/jwtFilesAcl'
  postgres:
    enabled: false
  mysql:
    enabled: false
  sqlite:
    enabled: false
  http:
    enabled: false
  redis:
    enabled: false
  mongodb:
    enabled: false
  grpc:
    enabled: false
  javascript:
    enabled: false

## Additional volumes.
extraVolumes:
  []
  # - name: tls
  #   secret:
  #     secretName: mosquitto-certs

## Additional volumeMounts to the main container.
extraVolumeMounts:
  []
  # - name: tls
  #   mountPath: /certs
  #   subPath: cafile
